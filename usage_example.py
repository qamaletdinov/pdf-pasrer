"""–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Ä–µ–∑—é–º–µ"""

from ai_resume_parser import UltraPreciseResumeParser, ResumeParserValidator, PerformanceBenchmark
import json

def example_single_file_parsing():
    """–ü—Ä–∏–º–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    parser = UltraPreciseResumeParser()
    validator = ResumeParserValidator()

    # –í–∞—à PDF —Ñ–∞–π–ª
    pdf_path = "resume.pdf"

    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à –º–µ—Ç–æ–¥)
        with open("extracted_text.txt", "r", encoding="utf-8") as f:
            resume_text = f.read()

        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–ª—å—Ç—Ä–∞-—Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥...")

        # –ü–∞—Ä—Å–∏–Ω–≥
        resume_data = parser.parse_resume_text(resume_text)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        validation_results = validator.validate_resume_data(resume_data)

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report = parser.generate_detailed_report(resume_data)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        json_output = parser.parse_to_json(resume_text, "output/parsed_resume.json")

        with open("output/detailed_report.txt", "w", encoding="utf-8") as f:
            f.write(report)

        with open("output/validation_results.json", "w", encoding="utf-8") as f:
            json.dump(validation_results, f, ensure_ascii=False, indent=2)

        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {resume_data.parsing_confidence:.1%}")
        print(f"‚úîÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è: {'–ü–†–û–ô–î–ï–ù–ê' if validation_results['overall_valid'] else '–ù–ï –ü–†–û–ô–î–ï–ù–ê'}")
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É output/")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def example_batch_processing():
    """–ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ"""
    parser = UltraPreciseResumeParser()
    validator = ResumeParserValidator()

    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—é–º–µ
    resume_files = ["resume1.txt", "resume2.txt", "resume3.txt"]

    results = []

    for i, file_path in enumerate(resume_files, 1):
        try:
            print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª {i}/{len(resume_files)}: {file_path}")

            with open(file_path, "r", encoding="utf-8") as f:
                resume_text = f.read()

            # –ü–∞—Ä—Å–∏–Ω–≥
            resume_data = parser.parse_resume_text(resume_text)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            validation = validator.validate_resume_data(resume_data)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_file = f"output/batch_result_{i}.json"
            parser.parse_to_json(resume_text, output_file)

            results.append({
                'file': file_path,
                'confidence': resume_data.parsing_confidence,
                'valid': validation['overall_valid'],
                'quality_score': validation['quality_score'],
                'candidate_name': resume_data.personal_info.full_name,
                'position': resume_data.job_preferences.desired_position
            })

            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {resume_data.parsing_confidence:.1%} —Ç–æ—á–Ω–æ—Å—Ç—å")

        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            results.append({
                'file': file_path,
                'error': str(e)
            })

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    with open("output/batch_summary.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)

    print(f"\nüìä –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results)} —Ñ–∞–π–ª–æ–≤")

def example_performance_benchmark():
    """–ü—Ä–∏–º–µ—Ä –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    parser = UltraPreciseResumeParser()
    benchmark = PerformanceBenchmark()

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—é–º–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑ —Ñ–∞–π–ª–æ–≤)
    test_resumes = [
        "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ 1...",
        "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ 2...",
        "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ 3..."
    ]

    print("üèÉ‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    # –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞
    benchmark_results = benchmark.benchmark_parser(parser, test_resumes, iterations=3)

    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–ï–ù–ß–ú–ê–†–ö–ê:")
    print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {benchmark_results['average_parsing_time']:.2f}—Å")
    print(f"üìà –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {benchmark_results['median_parsing_time']:.2f}—Å")
    print(f"üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {benchmark_results['average_confidence']:.1%}")
    print(f"üíæ –°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {benchmark_results['average_memory_usage']:.1f}MB")
    print(f"üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {benchmark_results['total_tests']}")

if __name__ == "__main__":
    # –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–∏–º–µ—Ä
    print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
    print("1. –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    print("2. –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    print("3. –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ")

    if choice == "1":
        example_single_file_parsing()
    elif choice == "2":
        example_batch_processing()
    elif choice == "3":
        example_performance_benchmark()
    else:
        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!")