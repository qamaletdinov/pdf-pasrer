"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ AI-–ø–∞—Ä—Å–µ—Ä–∞ —Ä–µ–∑—é–º–µ
"""

import json
from dataclasses import asdict
from resume_parser import UniversalResumeParser, parse_resume, parse_resume_batch
from resume_parser.config import PresetConfigs


def example_basic_usage():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üöÄ –ë–ê–ó–û–í–´–ô –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ
    resume_text = """
    –ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞
    Email: anna.smirnova@example.com
    –¢–µ–ª–µ—Ñ–æ–Ω: +7 (987) 654-32-10
    –ú–æ—Å–∫–≤–∞
    
    –ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
    
    –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:
    Senior Frontend Developer
    WebTech Ltd
    2021 - –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è
    - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ SPA –Ω–∞ React
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ junior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    
    Middle Frontend Developer  
    StartupCorp
    2019 - 2021
    - –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –Ω–∞ Vue.js
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å REST API
    
    –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:
    –ú–ì–£ –∏–º–µ–Ω–∏ –ú.–í. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞
    –§–∞–∫—É–ª—å—Ç–µ—Ç –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –∫–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–∏
    –ë–∞–∫–∞–ª–∞–≤—Ä, 2019
    
    –ù–∞–≤—ã–∫–∏:
    JavaScript, TypeScript, React, Vue.js, HTML5, CSS3, SCSS, 
    Webpack, Git, Jest, Cypress, Figma
    """
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
    parser = UniversalResumeParser()
    
    # –ü–∞—Ä—Å–∏–Ω–≥
    result = parser.parse(resume_text)
    
    print(f"üë§ –ò–º—è: {result.personal_info.full_name}")
    if result.personal_info.contact_info:
        print(f"üìß Email: {result.personal_info.contact_info.email}")
        print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {result.personal_info.contact_info.phone}")
    print(f"üèôÔ∏è  –ì–æ—Ä–æ–¥: {result.personal_info.city}")
    print(f"üíº –ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {result.job_preferences.desired_position}")
    print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞: {result.parsing_confidence:.1%}")
    
    print(f"\nüí° –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã ({len(result.experience)} –ø–æ–∑–∏—Ü–∏–π):")
    for i, exp in enumerate(result.experience, 1):
        print(f"  {i}. {exp.position} –≤ {exp.company}")
        if exp.seniority_level:
            print(f"     –£—Ä–æ–≤–µ–Ω—å: {exp.seniority_level.value}")
    
    print(f"\nüõ†Ô∏è  –ù–∞–≤—ã–∫–∏ ({len(result.skills)}):")
    skills_by_category = {}
    for skill in result.skills:
        category = skill.category.value if skill.category else 'other'
        if category not in skills_by_category:
            skills_by_category[category] = []
        skills_by_category[category].append(skill.name)
    
    for category, skills in skills_by_category.items():
        print(f"  {category.title()}: {', '.join(skills[:5])}")
    
    return result


def example_different_configs():
    """–ü—Ä–∏–º–µ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏"""
    print("\n" + "=" * 60)
    print("‚öôÔ∏è  –ü–†–ò–ú–ï–†–´ –° –†–ê–ó–ù–´–ú–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø–ú–ò")
    print("=" * 60)
    
    resume_text = "–ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤\nEmail: petr@test.com\nPython Developer\n–ù–∞–≤—ã–∫–∏: Python, Django"
    
    configs = [
        ("–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", PresetConfigs.default()),
        ("–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å", PresetConfigs.high_accuracy()),
        ("–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", PresetConfigs.fast_processing()),
        ("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", PresetConfigs.minimal()),
    ]
    
    for config_name, config in configs:
        parser = UniversalResumeParser(config)
        result = parser.parse(resume_text)
        
        print(f"üìù {config_name}: {result.parsing_confidence:.1%} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")


def example_batch_processing():
    """–ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("\n" + "=" * 60)
    print("üì¶ –ü–†–ò–ú–ï–† –ü–ê–ö–ï–¢–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
    print("=" * 60)
    
    # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—é–º–µ
    resumes = [
        """–°–µ—Ä–≥–µ–π –ü–µ—Ç—Ä–æ–≤
        Email: sergey@example.com
        Senior Java Developer
        –ù–∞–≤—ã–∫–∏: Java, Spring, PostgreSQL""",
        
        """–ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞  
        –¢–µ–ª–µ—Ñ–æ–Ω: +7-999-888-77-66
        UX Designer
        –ù–∞–≤—ã–∫–∏: Figma, Sketch, Prototyping""",
        
        """–ú–∏—Ö–∞–∏–ª –°–∏–¥–æ—Ä–æ–≤
        Email: mikhail@test.org
        DevOps Engineer  
        –ù–∞–≤—ã–∫–∏: Docker, Kubernetes, AWS, Jenkins"""
    ]
    
    # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    results = parse_resume_batch(resumes, max_workers=2)
    
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results)} —Ä–µ–∑—é–º–µ")
    successful = sum(1 for r in results if r['success'])
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}/{len(results)}")
    
    for i, result in enumerate(results, 1):
        if result['success']:
            data = result['data']
            name = data['personal_info']['full_name']
            confidence = result['confidence']
            print(f"  {i}. {name}: {confidence:.1%}")
        else:
            print(f"  {i}. –û—à–∏–±–∫–∞: {result['error']}")


def example_json_export():
    """–ü—Ä–∏–º–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON"""
    print("\n" + "=" * 60)
    print("üìÑ –ü–†–ò–ú–ï–† –≠–ö–°–ü–û–†–¢–ê –í JSON")
    print("=" * 60)
    
    resume_text = """
    –û–ª—å–≥–∞ –ö–æ–∑–ª–æ–≤–∞
    Email: olga@example.com
    Data Scientist
    –ù–∞–≤—ã–∫–∏: Python, Machine Learning, TensorFlow
    """
    
    result = parse_resume(resume_text)
    
    # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    simple_data = {
        'name': result.personal_info.full_name,
        'email': result.personal_info.contact_info.email if result.personal_info.contact_info else None,
        'phone': result.personal_info.contact_info.phone if result.personal_info.contact_info else None,
        'city': result.personal_info.city,
        'desired_position': result.job_preferences.desired_position if result.job_preferences else None,
        'experience_count': len(result.experience),
        'skills_count': len(result.skills),
        'education_count': len(result.education),
        'confidence': result.parsing_confidence,
        'skills': [skill.name for skill in result.skills],
        'experience': [{'position': exp.position, 'company': exp.company} for exp in result.experience]
    }
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
    json_output = json.dumps(simple_data, ensure_ascii=False, indent=2)
    
    print("üìã JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
    print(json_output)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    with open('/tmp/resume_example.json', 'w', encoding='utf-8') as f:
        f.write(json_output)
    
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: /tmp/resume_example.json")


def example_metrics_analysis():
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫"""
    print("\n" + "=" * 60)
    print("üìà –ü–†–ò–ú–ï–† –ê–ù–ê–õ–ò–ó–ê –ú–ï–¢–†–ò–ö")
    print("=" * 60)
    
    parser = UniversalResumeParser()
    
    # –ü–∞—Ä—Å–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—é–º–µ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    test_resumes = [
        "–ò–≤–∞–Ω –¢–µ—Å—Ç–æ–≤\nEmail: ivan@test.com\n–î–∏–∑–∞–π–Ω–µ—Ä\n–ù–∞–≤—ã–∫–∏: Photoshop",
        "–ú–∞—Ä–∏—è –ü—Ä–∏–º–µ—Ä–æ–≤–∞\n–¢–µ–ª–µ—Ñ–æ–Ω: +7-111-222-33-44\n–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥\n–ù–∞–≤—ã–∫–∏: SMM, Analytics",
        "–ê–Ω–¥—Ä–µ–π –ö–æ–¥–µ—Ä–æ–≤\nEmail: andrey@dev.com\nBackend Developer\n–ù–∞–≤—ã–∫–∏: Python, Django, Redis"
    ]
    
    for resume in test_resumes:
        parser.parse(resume)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = parser.get_parsing_statistics()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞:")
    print(f"  –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_parsed']}")
    print(f"  –£—Å–ø–µ—à–Ω–æ: {stats['successful_parsed']}")
    print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1%}")
    print(f"  –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats['average_confidence']:.1%}")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['average_processing_time']:.3f}—Å")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    detailed_metrics = parser.export_metrics()
    print(f"\nüìã –°–æ–±—Ä–∞–Ω–æ –º–µ—Ç—Ä–∏–∫: {len(detailed_metrics['metrics'])}")


def example_error_handling():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\n" + "=" * 60)
    print("‚ö†Ô∏è  –ü–†–ò–ú–ï–† –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
    print("=" * 60)
    
    from resume_parser.core.exceptions import ParsingError, TextExtractionError
    
    parser = UniversalResumeParser()
    
    # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    test_cases = [
        ("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç", "abc"),
        ("–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞", ""),
        ("–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã", "   \n\n   "),
        ("–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç", "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\nEmail: test@example.com\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
    ]
    
    for test_name, test_text in test_cases:
        try:
            result = parser.parse(test_text)
            print(f"‚úÖ {test_name}: —É—Å–ø–µ—à–Ω–æ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.parsing_confidence:.1%})")
        except ParsingError as e:
            print(f"‚ùå {test_name}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ - {e}")
        except Exception as e:
            print(f"‚ùå {test_name}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {e}")


def example_custom_validation():
    """–ü—Ä–∏–º–µ—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("\n" + "=" * 60)
    print("üîç –ü–†–ò–ú–ï–† –ö–ê–°–¢–û–ú–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò")  
    print("=" * 60)
    
    from resume_parser.utils.helpers import DataValidator
    
    validator = DataValidator()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
    test_data = [
        ("Email", "test@example.com", validator.validate_email),
        ("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email", "invalid-email", validator.validate_email),
        ("–¢–µ–ª–µ—Ñ–æ–Ω –†–§", "+7-999-123-45-67", validator.validate_phone),
        ("–ò–º—è", "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", validator.validate_name),
        ("URL", "https://github.com/user", validator.validate_url),
    ]
    
    for field_name, value, validate_func in test_data:
        try:
            is_valid, score = validate_func(value)
            status = "‚úÖ" if is_valid else "‚ùå"
            print(f"{status} {field_name}: {value} (–æ—Ü–µ–Ω–∫–∞: {score:.2f})")
        except Exception as e:
            print(f"‚ùå {field_name}: –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - {e}")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("üß™ –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û AI-–ü–ê–†–°–ï–†–ê –†–ï–ó–Æ–ú–ï")
    print("=" * 60)
    
    try:
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
        example_basic_usage()
        example_different_configs()
        example_batch_processing() 
        example_json_export()
        example_metrics_analysis()
        example_error_handling()
        example_custom_validation()
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –ü–†–ò–ú–ï–†–´ –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print("–ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ production!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()