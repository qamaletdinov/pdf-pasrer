"""
–¢–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Ä–µ–∑—é–º–µ
"""

import sys
sys.path.append('/home/runner/work/Raspisaniye/Raspisaniye')

from resume_parser import UniversalResumeParser
from resume_parser.config import PresetConfigs

def test_text_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ
    test_resume = """
    –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
    Email: ivan.petrov@example.com
    –¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90
    –ú–æ—Å–∫–≤–∞
    
    –ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
    
    –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:
    Senior Python Developer
    –¢–µ—Ö–ö–æ–º–ø–∞–Ω–∏—è –û–û–û
    2020 - –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è
    –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Django –∏ Flask
    
    Python Developer
    StartupCorp
    2018 - 2020
    –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ REST API –∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
    
    –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:
    –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
    –§–∞–∫—É–ª—å—Ç–µ—Ç –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –∫–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–∏
    –ë–∞–∫–∞–ª–∞–≤—Ä, 2018
    
    –ù–∞–≤—ã–∫–∏:
    Python, Django, Flask, PostgreSQL, Redis, Docker, Git, Linux
    """
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Ä–µ–∑—é–º–µ...")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        config = PresetConfigs.default()
        parser = UniversalResumeParser(config)
        
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ
        print("\nüìÑ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ...")
        result = parser.parse(test_resume)
        
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞: {result.parsing_confidence:.1%}")
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "=" * 60)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:")
        print("=" * 60)
        
        # –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if result.personal_info:
            print(f"üë§ –ò–º—è: {result.personal_info.full_name}")
            if result.personal_info.contact_info:
                print(f"üìß Email: {result.personal_info.contact_info.email}")
                print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {result.personal_info.contact_info.phone}")
            print(f"üèôÔ∏è  –ì–æ—Ä–æ–¥: {result.personal_info.city}")
        
        # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ
        if result.job_preferences:
            print(f"üíº –ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {result.job_preferences.desired_position}")
        
        # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
        if result.experience:
            print(f"\nüí° –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã ({len(result.experience)} –ø–æ–∑–∏—Ü–∏–π):")
            for i, exp in enumerate(result.experience, 1):
                print(f"  {i}. {exp.position}")
                if exp.company:
                    print(f"     –ö–æ–º–ø–∞–Ω–∏—è: {exp.company}")
                if exp.seniority_level:
                    print(f"     –£—Ä–æ–≤–µ–Ω—å: {exp.seniority_level.value}")
        
        # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        if result.education:
            print(f"\nüéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ({len(result.education)} –∑–∞–ø–∏—Å–µ–π):")
            for i, edu in enumerate(result.education, 1):
                print(f"  {i}. {edu.institution}")
        
        # –ù–∞–≤—ã–∫–∏
        if result.skills:
            print(f"\nüõ†Ô∏è  –ù–∞–≤—ã–∫–∏ ({len(result.skills)} –Ω–∞–≤—ã–∫–æ–≤):")
            skills_by_category = {}
            for skill in result.skills:
                category = skill.category.value if skill.category else 'other'
                if category not in skills_by_category:
                    skills_by_category[category] = []
                skills_by_category[category].append(skill.name)
            
            for category, skills in skills_by_category.items():
                print(f"  {category.title()}: {', '.join(skills)}")
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if result.metadata:
            print(f"\n‚öôÔ∏è  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
            print(f"  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.metadata.parsing_duration_ms:.0f}–º—Å")
            print(f"  –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {result.metadata.text_length} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"  –§–æ—Ä–º–∞—Ç: {result.metadata.detected_format}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
        print("\n" + "=" * 60)
        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ï–†–ê:")
        print("=" * 60)
        
        stats = parser.get_parsing_statistics()
        print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_parsed']}")
        print(f"–£—Å–ø–µ—à–Ω–æ: {stats['successful_parsed']}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1%}")
        print(f"–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats['average_confidence']:.1%}")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['average_processing_time']:.3f}—Å")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_batch_processing():
    """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    test_resumes = [
        "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞\nEmail: anna@test.com\n–ù–∞–≤—ã–∫–∏: JavaScript, React, CSS",
        "–ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤\n–¢–µ–ª–µ—Ñ–æ–Ω: +7-999-123-45-67\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ Java\n–ù–∞–≤—ã–∫–∏: Java, Spring, MySQL",
        "–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞\nEmail: maria@example.org\n–î–∏–∑–∞–π–Ω–µ—Ä\n–ù–∞–≤—ã–∫–∏: Photoshop, Figma, UI/UX"
    ]
    
    print("\n" + "=" * 60)
    print("üîÑ –¢–ï–°–¢ –ü–ê–ö–ï–¢–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò:")
    print("=" * 60)
    
    try:
        config = PresetConfigs.fast_processing()
        parser = UniversalResumeParser(config)
        
        results = parser.parse_batch(test_resumes)
        
        print(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results)} —Ä–µ–∑—é–º–µ")
        
        successful = sum(1 for r in results if r['success'])
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}/{len(results)}")
        
        for i, result in enumerate(results, 1):
            status = "‚úÖ" if result['success'] else "‚ùå"
            confidence = f"{result['confidence']:.1%}" if result['success'] else "N/A"
            print(f"  {status} –†–µ–∑—é–º–µ {i}: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False


if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û AI-–ü–ê–†–°–ï–†–ê –†–ï–ó–Æ–ú–ï")
    print("=" * 60)
    
    # –¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    test1_success = test_text_parsing()
    
    # –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    test2_success = test_batch_processing()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    print(f"–¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_success else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_success else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    
    if test1_success and test2_success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI-–ø–∞—Ä—Å–µ—Ä —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")